#!/usr/bin/env python3
"""
Test with same emails but no context descriptions to compare personalization
"""

import os
import sys
from pathlib import Path

# Load environment variables
from dotenv import load_dotenv
load_dotenv()

# Add project root to path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

def generate_no_context_consent_tokens():
    """Generate consent tokens for no-context testing."""
    
    print("üîê Generating No-Context Test Consent Tokens")
    print("=" * 50)
    
    try:
        from hushh_mcp.consent.token import issue_token
        from hushh_mcp.constants import ConsentScope
        
        user_id = "test_user_no_context"
        agent_id = "agent_mailerpanda"
        
        print(f"üë§ User ID: {user_id}")
        print(f"ü§ñ Agent ID: {agent_id}")
        
        # Generate all required consent tokens
        consent_tokens = {}
        
        required_scopes = [
            ConsentScope.VAULT_READ_EMAIL,
            ConsentScope.CUSTOM_TEMPORARY,
            ConsentScope.VAULT_WRITE_EMAIL,
            ConsentScope.VAULT_READ_FILE,
            ConsentScope.VAULT_WRITE_FILE
        ]
        
        for scope in required_scopes:
            try:
                token = issue_token(
                    user_id=user_id,
                    agent_id=agent_id,
                    scope=scope,
                    expires_in_ms=3600000  # 1 hour
                )
                consent_tokens[scope.value] = token.token
                print(f"‚úÖ Generated token for {scope.value}")
            except Exception as e:
                print(f"‚ùå Failed to generate {scope.value} token: {e}")
        
        print(f"\nüéØ Total tokens generated: {len(consent_tokens)}")
        return consent_tokens, user_id
        
    except Exception as e:
        print(f"‚ùå Token generation error: {e}")
        return {}, None

def test_no_context_emails():
    """Test emails without context descriptions to see standard personalization."""
    
    print(f"\nüìß Testing No-Context Email Personalization")
    print("=" * 50)
    
    # Generate consent tokens
    consent_tokens, user_id = generate_no_context_consent_tokens()
    
    if not consent_tokens or len(consent_tokens) < 3:
        print(f"‚ùå Cannot proceed without valid consent tokens")
        return False
    
    try:
        from hushh_mcp.agents.mailerpanda.index import MassMailerAgent
        
        # Get API keys from environment
        api_keys = {
            'google_api_key': os.environ.get('GOOGLE_API_KEY'),
            'mailjet_api_key': os.environ.get('MAILJET_API_KEY'),
            'mailjet_api_secret': os.environ.get('MAILJET_API_SECRET')
        }
        
        print(f"\nüöÄ Initializing MailerPanda agent...")
        agent = MassMailerAgent(api_keys=api_keys)
        print(f"‚úÖ Agent initialized successfully!")
        
        # Same user input as context test but no descriptions available
        user_input = """
        Send personalized emails about our new AI-powered email platform.
        
        Subject: Discover the Future of Email Marketing with AI
        
        The email should:
        - Welcome each recipient personally
        - Highlight our AI-powered email platform features
        - Use a professional and friendly tone
        - Include examples of platform benefits
        - Provide a clear call-to-action
        
        Since no specific context is provided, create a general but personalized
        email that works for all professional audiences.
        
        Send to all contacts in the Excel file.
        """
        
        print(f"\nüìß Starting No-Context Email Campaign:")
        print(f"üéØ Personalization: BASIC (No context descriptions)")
        print(f"üìÅ Excel file: no_context_test.xlsx")
        print(f"üë• Recipients: 3 (Same emails, no context)")
        print(f"üîë Tokens: {list(consent_tokens.keys())}")
        
        # Execute the campaign
        print(f"\nüîÑ Executing no-context email campaign...")
        result = agent.handle(
            user_id=user_id,
            consent_tokens=consent_tokens,
            user_input=user_input,
            mode="interactive",  # Interactive mode for approval
            enable_description_personalization=True,  # Still enabled but no descriptions
            excel_file_path="hushh_mcp/agents/mailerpanda/no_context_test.xlsx",
            personalization_mode="smart"
        )
        
        print(f"\nüìä Campaign Results:")
        print(f"Status: {result.get('status', 'Unknown')}")
        
        if result.get('status') == 'complete':
            print(f"\n‚úÖ Campaign completed successfully!")
            
            # Show personalization statistics
            if 'personalized_count' in result:
                print(f"\nüéØ Personalization Statistics:")
                print(f"  Personalized emails: {result.get('personalized_count', 0)}")
                print(f"  Standard emails: {result.get('standard_count', 0)}")
                print(f"  Description-based customization: {result.get('description_column_detected', False)}")
            
            # Show email delivery status
            if 'emails_sent' in result:
                print(f"\nüì§ Delivery Statistics:")
                print(f"  Total emails sent: {result.get('emails_sent', 0)}")
                
            # Show personalization comparison
            print(f"\nüîç No-Context Personalization:")
            print(f"  üéÆ dragnoid121@gmail.com: General professional content")
            print(f"  üíº alokkale121@gmail.com: General professional content")
            print(f"  üéì 23b4215@iitb.ac.in: General professional content")
            print(f"  ‚ö†Ô∏è  All emails likely similar (no context for differentiation)")
                
            return result
        
        elif 'email_template' in result:
            template = result['email_template']
            print(f"\nüìß Generated Email Template (No Context):")
            print(f"Subject: {template.get('subject', 'No subject')}")
            print(f"Body Preview: {str(template.get('body', 'No body'))[:400]}...")
            
            print(f"\nüîç Key Observations:")
            print(f"  ‚Ä¢ No description column detected")
            print(f"  ‚Ä¢ All recipients get same content")
            print(f"  ‚Ä¢ Only name/company personalization available")
            print(f"  ‚Ä¢ No context-aware customization")
            
            return result
        
        else:
            print(f"üìä Full result: {result}")
            return result
            
    except Exception as e:
        print(f"‚ùå Test Error: {str(e)}")
        import traceback
        traceback.print_exc()
        return None

def show_comparison_info():
    """Show comparison between context vs no-context testing."""
    
    print(f"\nüìä Context vs No-Context Comparison")
    print("=" * 45)
    
    print(f"""
üîç What We're Comparing:

WITH CONTEXT (Previous Test):
‚úÖ Description column with rich context
‚úÖ Gaming developer context ‚Üí Technical APIs, code examples
‚úÖ Professional engineer context ‚Üí Business benefits, efficiency
‚úÖ Student context ‚Üí Learning resources, educational content
‚úÖ Different tones and examples for each recipient

WITHOUT CONTEXT (This Test):
‚ö†Ô∏è  No description column
‚ö†Ô∏è  Same general content for all recipients
‚ö†Ô∏è  Only basic name/company personalization
‚ö†Ô∏è  No context-aware customization
‚ö†Ô∏è  Standard professional tone for everyone

üìà Expected Differences:
‚Ä¢ Context test: Highly personalized, audience-specific
‚Ä¢ No-context test: Generic but professional
‚Ä¢ Personalization level: High vs Basic
‚Ä¢ Content variety: Diverse vs Uniform
    """)

if __name__ == "__main__":
    print("üöÄ No-Context Email Personalization Test")
    print("=" * 50)
    
    # Show comparison information
    show_comparison_info()
    
    # Run the no-context test
    result = test_no_context_emails()
    
    if result:
        print(f"\nüéâ No-context test completed!")
        print(f"Status: {result.get('status', 'Unknown')}")
        
        if result.get('status') == 'complete':
            print(f"\nüí° No-Context Test Summary:")
            print(f"  ‚úÖ Same email addresses tested")
            print(f"  ‚úÖ No description context provided")
            print(f"  ‚úÖ Standard personalization only")
            print(f"  ‚úÖ General professional content")
            print(f"  ‚úÖ Demonstrates difference vs context-based")
            
            print(f"\nüîç Key Findings:")
            print(f"  üìß All recipients receive similar content")
            print(f"  üéØ No audience-specific customization")
            print(f"  üíº Basic name/company personalization only")
            print(f"  ‚öñÔ∏è  Shows value of context descriptions")
            
    else:
        print(f"\n‚ùå Test failed - check error messages above")
    
    print(f"\n‚úÖ No-context comparison test completed!")
