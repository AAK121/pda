{
  "content": "On graphic lambda calculus and the dual of the graphic beta move Marius Buliga Institute of Mathematics, Romanian Academy P.O. BOX 1-764, RO 014700 Bucure\u0018 sti, Romania Marius.Buliga@imar.ro This version: 04.02.2013 Abstract This is a short description of graphic lambda calculus, with special emphasis on a duality suggested by the two di erent appearances of knot diagrams, in lambda calculus and emergent algebra sectors of the graphic lambda calculus respectively. This duality leads to the introduction of the dual of the graphic beta move. While the graphic beta move corresponds to beta reduction in untyped lambda calculus, the dual graphic beta move appears in relation to emergent algebras. 1 The set GRAPH 3 2 The graphic beta move, with details 5 3 Fan-out moves: CO-COMM, CO-ASSOC, GLOBAL FAN-OUT, LOCAL FAN-OUT 8 4 Pruning moves. Elimination of loops 10 5 Emergent algebra moves R1a, R1b, R2 and ext2 12 6 Extensionality in graphic lambda calculus 14 7 Graphic beta rule as braiding 15 8 Extended graphic beta move 17 9 Dual of the extended beta move. Termination as implosion or blow-out 22 10 Dual of the graphic beta move implies some Reidemeister moves 25 1arXiv:1302.0778v1 [math.GT] 4 Feb 2013\nSources, to read if necessary: The following list of papers, with the format (link to arxiv, bibliography citation, title): - arXiv:1211.1604, [1] - Graphic lambda calculus and knot diagrams - arXiv:1207.0332, [2] - Local and global moves on locally planar trivalent graphs, lambda calculus and lambda-Scale - arXiv:1205.0139, [3] - Lambda-Scale, a lambda calculus for spaces with dilations - arXiv:1005.5031, [6] - Braided spaces with dilations and sub-riemannian symmetric spaces - arXiv:0907.1520, [4] - Emergent algebras. - The online tutorial Graphic lambda calculus and the posts with the tag graphic lambda calculus from the chorasimilarity blog, - The page Emergent algebras Computing with space Graphical calculi What is graphic lambda calculus? Graphic lambda calculus is a formalism working with oriented, locally planar, trivalent (or univalent) graphs, with decorated nodes. It has a number of moves acting on such graphs, which can be local or global (in the sense of arXiv:1207.0332, [2] section 2). It contains di erential calculus in metric spaces (via the formalism of emergent algebras [4], itself constructed over the geometry and analysis of metric spaces with dilations, in- troduced in [5], see especially the section 4, on the use of binary decorates trees), untyped lambda calculus (explained in arXiv:1207.0332, [2]) and that part of knot theory which can be expressed by using knot diagrams (explained in arXiv:1211.1604, [1]). What is the motivation? I wanted to have a lambda calculus formalism which does not need alpha renaming, even better, without names for variables or terms. Also, I wanted to understand graphic manipulations of knot diagrams related to emergent algebras (explained in the paper arXiv:1103.6007, [7], for a more algebraic approach see arXiv:1005.5031, [6]) as a kind of computation. This is achieved by the extended graphic beta move. Are there other graphic lambda calculi? Yes, see for example the page To dissect a mockingbird: a graphical notation for the lambda calculus with animated reduction and go to the end of the page for links to bibliographic information. However, the graphic lambda calculus presented here is di erent, for several reasons, among them because of the connections with knot diagrams ( rst explained in the post 3D grossings in graphic lambda calculus, the beta reduction is a braiding operation), because of the attention to local and global moves and sets of graphs (terms) and because of the connection with emergent algebras and di erential calculus in metric spaces. A detailed discussion about the relations between this graphic lambda calculus and others would be very useful. Sectors of graphic lambda calculus. A sector of the graphic lambda calculus is a pair: - a set of graphs, de ned by a local or global condition, - a set of moves, either from the list of available moves, or moves obtained as a concate- nation of the ones listed here. The name graphic lambda calculus comes from the fact that there it has untyped lambda calculus as a sector. In fact, there are three important sectors of graphic lambda calculus: 2\n- untyped lambda calculus sector, which contains all graphs in GRAPH which are ob- tained from untyped lambda calculus terms by the algorithm described here, [2] section 3. The moves of this sector are: graphic beta move section 2, fan-out moves section 3, pruning moves section 4 and elimination of loops. The article arXiv:1207.0332 [2] describes this sector in detail. - emergent algebra sector, which contain all graphs in GRAPH described in the article arXiv:1103.6007 [7] , via the emergent algebra crossing macros, and the following moves: dual graphic beta move (which forms with the graphic move the extended beta move), fan-out moves, pruning moves, emergent algebra moves section 5. - knot and tangle diagrams sector, de ned by using crossings in lambda calculus macro and the Reidemeister moves as described in the post Generating set of Reidemeister moves for graphic lambda crossings, which are composite moves obtained from the graphic beta move and some local fan-out moves. The article arXiv:1211.1604 [1] describes this sector in detail. The separation of the set GRAPH of graphs into sectors is arti cial, distinctions between sectors blur under a more attentive look. For example, untyped lambda calculus can be seen as represented by the untyped lambda calculus sector, but one can use a sector which exploits graphical versions of combinators in order to obtain a di erent representation (not explained in this paper). Likewise, the knot and tangle diagram sector is constructed over the \"lambda calculus crossing macro\" described in section 7. One can use as well the emergent algebra sector, with it's \"emergent algebra crossing macro\" described in section 5. (In fact this double appearance of knot diagram crossings is the path to the discovery of the extended graphic beta move.) The moves. - The graphic beta move, with details, section 2, - Fan-out moves: CO-COMM, CO-ASSOC, GLOBAL FAN-OUT, LOCAL FAN-OUT, section 3, - Pruning moves and elimination of loops, section 4, - Emergent algebra moves R1a, R1b, R2 and ext2, section 5 - The ext1 move, section 6 for extensionality. - The extended beta move, introduced here, section 8. The generating moves, discussed here, here and here are under consideration for futher inclusion in the list of moves. 1 The set GRAPH This is the set of graphs which are subjected to the moves. Any nite assembly of the following elementary graphs, called \"gates\" is a graph in GRAPH . - The\u0015gate, which corresponds to the lambda abstraction operation from lambda calculus, see lambda terms. It is this: 3\nThis gate looks like it has one input (the entry arrow) and two outputs (the left and right exit arrows respectively). This could not be a graph representing an operation, because an operation has two inputs and one output. For example, the lambda abstraction operation takes as inputs xa variable name and Aa term and outputs the term \u0015x:A . Remember that the graphic lambda calculus does not have variable names. There is a certain algorithm, described here, arXiv:1207.0332, [2] section 3 which transforms a lambda term into a graph in GRAPH , such that to any lambda abstraction which appears in the term corresponds a \u0015gate. The algorithm starts with the representation of the lambda abstraction operation as a node with two inputs and one output, namely as an elementary gate which looks like the \u0015gate, but the orientation of the left exit arrow is inverse than the one of the\u0015gate. At some point in the algorithm the orientation is reversed and we get \u0015 gates as shown here. The\u0015gate looks like it takes a term Aas input and it outputs at the left exit arrow the variable name xand at the right exit arrow the term \u0015x:A . (It does not do this, properly, because there will be no variable names in the formalism.) - The fgraph, which corresponds to the application operation from lambda calculus, see lambda terms. It is this: This gate looks like the graph of an operation. The sign I use is like a curly join sign. - The \u0007 graph, which will be used as a FAN-OUT gate, it is: - The \u0016\"graph. For any element \"2\u0000 of an abelian group \u0000 (think about \u0000 as being (Z;+) or ((0;+1);\u0001) ) there is an \"exploration gate\", or \"dilation gate\", which looks like the graph of an operation: (Therefore we have a family of operations, called \"dilations\", indexed by the elements of an abelian group. This is a structure coming from emergent algebras arXiv:0907.1520, [4].) We use these elementary graphs for constructing the graphs in GRAPH . Any assembly of these gates, in any ( nite) number, which respects the orientation of arrows, is in GRAPH . Remark that we obtain trivalent graphs, with decorated nodes, each node having a cyclical order of his arrows (hence locally planar graphs). 4\nMoreover, we accept arrows which input or output into nothing. Indeed, in particular the elementary graphs or gates are in GRAPH and all the arrows of an elementary graph either input or output to nothing. Technically, we may imagine that we complete a graph in GRAPH , if necessary, with univalent nodes, called \"leaves\" (they may be be decorated with \"INPUT\" or \"OUTPUT\", depending on the orientation of the arrow where they sit onto). For this reason we admit into GRAPH arrows without nodes which are elementary graphs, called wires, , and loops (without nodes from the elementary graphs, nor leaves) Finally, we introduce an univalent gate, the termination gate: . The termination gate has an input leaf and no output. Any graph which is a reunion of lines, loops and assemblies of the elementary graphs (termination graph included) is in GRAPH and any graph in GRAPH is obtained in this way. 2 The graphic beta move, with details Here it is explained the most important move in graphic lambda calculus: the graphic beta move. A move is a transformation of a graph into another. It is not a function from GRAPH toGRAPH though, as we shall see. The graphic beta move takes its name from the beta reduction in lambda calculus. Consider the set GRAPH with the equality of oriented, locally planar graphs (with leaves not numbered), denoted by \u0011. A graphic beta move is a local move which consists in replacing a pattern (sub-graph) by another pattern. More precisely, we can apply the graphic beta move to any graph which contains a certain pattern (sub-graph) and we obtain a new graph, which is identical with the initial one, with the exception of the pattern, now replaced by the other pattern. In some gures, for clarity, we shall add a dashed closed curve which encircles the pattern which is subjected to the move. This is the convention followed in arXiv:1207.0332, [2]. - The graphic beta move. See the explanations after the gure. The labels \"1, 2, 3, 4\" are used only as guides for gluing correctly the new pattern, after removing the old one. Imagine that we have a graph which contains as a sub-graph the one from the left hand side (LHS) of the previous gure. Then, by a graphic beta move, we may replace the pair of nodes from the LHS gure with two arrows, as indicated by the labelling \"1,2,3,4\". The rest of the graph is unchanged. We may represent the graphic beta move like this: 5\nUp to the particular embedding in the plane of the graph from the right hand side (RHS), the move is the same. The intersection of the \"1,3\" arrow with the \"4,2\" arrow is an artifact of the embedding, there is no node there. Intersections of arrows have no meaning, remember that we work with graphs which are locally planar, not globally planar. The graphic beta move goes into both directions. Referring to the rst two pictures, we may pick a pair of arrows and label them with \"1,2,3,4\", such that, according to the orientation of the arrows, \"1\" points to \"3\" and \"4\" points to \"2\", without any node or label between \"1\" and \"3\" and between \"4\" and \"2\" respectively. Then, by a graphic beta move, we may replace the portions of the two arrows which are between \"1\" and \"3\", respectively between \"4\" and \"2\", by the pattern from the LHS of the gure. Here is an example. The red drawings have no meaning in the formalism, I have put them only to make a more clear representation of the move. Remark that we may read the move from left to right, as well as from right to left. The dashed closed curve serves to mark the pattern. The graphic beta move may be applied to a single arrow, or to a loop, there is nothing which might stop this. For example, here are three applications of the graphic beta move: 6\nIn particular this gives a reason for considering loops and wires as members of GRAPH . A point important to stress is that the graphic beta move is not dependent of the partic- ular embedding into the plane of the graphs (which we use when we draw the graphs). This will be important further, when we shall discuss about the crossing macros, see Graphic beta rule as braiding section 7. Also, di erent labelling (of the same graphs) leads to di erent outcomes of the graphic beta move. This is explained in the next gure: Here \"A, B, C, D\" denote four graphs in GRAPH . Two possible graphic beta moves are depicted. Let's read them from right to left. At the right we have a graph with two arrows, connecting \"A\" with \"B\" and \"D\" with \"C\". We may apply the graphic beta move to this graph in two ways, depending on the labelling of the arrows. If we mark the arrow from \"A\" to \"B\" with \"1,3\" and the arrow from \"D\" to \"C\" with \"4,2\" then we get the rst graphic beta move. However, we may choose to mark the arrow from \"A\" to \"B\" with \"4,2\" and the arrow from \"D\" to \"C\" with \"1,3\", applying then the graphic beta move. The outcome is di erent. A particular case of the previous gure is yet another justi cation for having loops as elements in GRAPH . 7\nThese two applications of the graphic beta move may be represented alternatively like this: A move which looks very much alike the graphic beta move is the UNZIP operation from the formalism of knotted trivalent graphs, see for example the paper The algebra of knotted trivalent graphs and Turaevs shadow world by D.P. Thurston, section 3. In order to see this, let's draw again the graphic beta move, this time without labelling the arrows: The unzip operation acts only from left to right in the following gure. Remarkably, it acts on trivalent graphs (but not oriented). UNZIP is not a move in graphic lambda calculus. 3 Fan-out moves: CO-COMM, CO-ASSOC, GLOBAL FAN-OUT, LOCAL FAN-OUT Here are described the moves directly related to the \u0007 gate. - CO-COMM move. This is the local move depicted in the following gure 8\nIt means we may permute the outputs of a \u0007 gate. The name means \"co-commutativity\", because the diagram resembles to the one of the commutativity property, with the exception of the arrows orientations, which are in opposite directions (hence \"co-\"). - CO-ASSOC move. This is a local move, described by the next gure It has the following e ect: by using CO-ASSOC moves, we may move between any two binary trees formed only with \u0007 gates, with the same number of output leaves. The name means \"co-associativity\" and the explanation is similar to the previous one, with \"commutativity\" replaced by \"associativity\". - GLOBAL FAN-OUT. This is a global move, because it involves a modi cation of an arbitrary number of nodes (gates) and arrows. Precisely, the move acts like in the following picture: if Ais a graph in GRAPH then we may replace the graph Aconnected to an \u0007 gate by two copies of A. More speci cally, the graphAfrom the left hand side of the picture has to be connected only to the input of the \u0007 gate, with no other connection to the rest of the graph which may be found outside the gured dashed curve. 9\nGLOBAL FAN-OUT implies CO-COMM (namely two GLOBAL FAN-OUT moves have the e ect of one CO-COMM move). The move CO-COMM is not useless though: we may choose to work in a sector of the graphic lambda calculus which uses CO-COMM but not GLOBAL FAN-OUT. There is a variant of this move which is local. - LOCAL FAN-OUT. Fix a number Nand consider only graphs Awhich have at most N(nodes + arrows). The NLOCAL FAN-OUT move is the same as the GLOBAL FAN-OUT move, only it applies only to such graphs A. LOCAL FAN-OUT does not imply CO-COMM. Important remark: The gate \u0007 is really a fan-out gate only in the sense described by the FAN-OUT moves. In the absence of one of this moves, the gate cannot be described as a \"fan-out\". The \"fan-out\" is in the moves, not in the gate. 4 Pruning moves. Elimination of loops Here are described the moves related to the univalent termination gate. There are local and global pruning moves. At the end of the section we write about the elimination of loops. - LOCAL PRUNING. The local moves which eliminate \"dead edges\" or \"dead nodes\" are the following: 10\nThese moves go in one direction, compared with the graphic beta move, which is al- lowed in both directions. In arXiv:1207.0332v1 [2] paragraph 2.6, where this moves were introduced, they are allowed in both directions. However, I intend to modify this and to introduce generation moves instead, like CREA and GARB, as explained in Ancient Turing machines posts here and here. - GLOBAL PRUNING. Like the GLOBAL FAN-OUT move section 3, this is a global move. A local version of it, in the spirit of the LOCAL FAN-OUT move, may be introduced. For any graph AinGRAPH , ifAis connected ONLY to a termination gate, then we may remove it. 11\n- Elimination of loops. This move has been proposed in arXiv:1207.0332, [2] section 2, paragraph 2.10. We are free to erase or add loops to graphs in GRAPH . 5 Emergent algebra moves R1a, R1b, R2 and ext2 Here are described the moves related to emergent algebras. This moves involve the gates \u0016 \", \u0007 and the termination gate. I shall use the notations of the Reidemeister moves for oriented knot diagrams from the paper arXiv:0908.3127 [8], only that I use the letter R from Reidemeister instead of used by Polyak. In the setting of emergent algebras arXiv:1005.5031 [6], arXiv:0907.1520, [4], to each \"2\u0000, where \u0000 is an abelian group, is associated an operation (on a set X), which is graphically represented (in the graphic lambda calculus formalism) by an associated gate \u0016 \". With respect to any \"2\u0000 the pair ( X;\u0016\") is an idempotent right quasigroup, moreover the operation associated to the neutral element of \u0000 is x\u00161y=yand for any \";\u00162\u0000 and any x;y2Xwe havex\u0016\"(x\u0016\u0016y) =x\u0016\"\u0016y. There are special cases, namely when the operations \u0016\"are quasigroups operations, and the most particular case of left distributive emergent algebras, where in particular ( X;\u0016\") becomes a quandle. These algebraic axioms admit a description in terms of knot diagrams (via the well- known relation between quandles and knot diagrams). In the paper arXiv:1005.5031 [6], then in arXiv:1103.6007, [7] section 3.1 this is explained in detail. In the decorated knots formalism, crossings of oriented wires are decorated with elements \"of a commutative group \u0000. The relation between these crossings and their representations in terms of trivalent graphs is described by the following gures, which can be seen as de nitions of the (emergent algebra) \"crossing macros\" (see section 7 for the de nition of lambda calculus crossing macros): 12\n(See also the post 3D crossings in emergent algebras in order to understand the relation with knot diagram crossings and with Reidemeister moves for oriented knot diagrams.) The emergent algebra moves are just imported from the emergent algebra formalism. They have the following form. - The move R1a is described in the following gure The reason for calling this move R1a is that is related to the move R1a from Polyak paper ( and also to R1d move). In the papers on emergent algebras this move is called R1, that is \"Reidemeister move 1\". (In order to obtain exactly the Reidemeister move R1a from the oriented knot diagrams formalism we need also CO-COMM.) - The move R1b is this: This move is related to the move R1b from Polyak (and also to R1c). This move does not appear in relation with general emergent algebras, it is true only for a special subclass of them, namely uniform idempotent quasigroups. - The move R2 is the following: This move is related to all Reidemeister 2 moves (using also CO-ASSOC, CO-COMM, and LOCAL PRUNING). 13\n- The move ext2. The notation comes from the rule (ext2) from lambda-Scale calculus. In emergent algebra language it means that the emergent algebra operation indexed by the neutral element of 1 2\u0000 is the trivial operation x\u00161y=y. (but for this LOCAL PRUNING is also used). 6 Extensionality in graphic lambda calculus I want to discuss here the introduction of extensionality in the graphic lambda calculus. In some sense, extensionality is already present in the emergent algebra moves section 5. Have you noticed the (name of the) move \"ext2\"? However, the eta-reduction from untyped lambda calculus needs a new move. I called it the ext1 move in arXiv:1207.0332 [2] paragraph 2.7. It is a global move, because in order to use it one has to check a global condition (without bound on the number of nodes and edges involved in the condition). In the mentioned paper I stated that the move applies only to graphs which represent lambda calculus terms, but now I see no reason why it has to be con ned to this sector, therefore here I shall formulate the ext1 move in more generality. - The move ext1. If there is no oriented path from \"2\" to \"1\" outside the left hand side picture then one may replace this picture by an edge. Conversely, if there is no oriented path connecting \"2\" with \"1\" then one may replace the edge with the graph from the left hand side of the following picture: This move acts like eta-reduction when translated back from graphs to lambda calculus terms. \"Ext\" comes from \"extensionality\". 14\nLet us see why we need to formulate the move like this. Suppose that we eliminate the global condition \"there is no oriented path from \"2\" to \"1\" outside the left hand side of the previous picture\". In particular let us suppose that there is an edge from \"2\" to \"1\" which completes the graphs from the LHS of the previous picture. For this graph, which appears at left in the next gure, we may use the graphic beta move like this (numbers in red indicate how we use the graphic beta move): If we could apply the ext 1 move to this graph, then the result would be the following: Not only the result of this move is one loop, but it is the \"wrong\" loop, in the sense that this loop is obtained by closing the edge which vanishes when the graphic beta move is applied. There is no contradiction though, unless we wish to decorate the edges (i.e. to evaluate the result of the computation). It is just strange. There is one question left: why the move called \"ext2\", which is one of the emergent algebra moves, is also an extensionality move? An answer is that the move ext2 says that the dilation of coe\u000ecient \"1\" is the identity function . 7 Graphic beta rule as braiding The moves of the graphic lambda calculus are independent of the particular embeddings of trivalent graphs into the plane. This may not be obvious from the gures which explain the moves, but it is so after further inspection. Let us look again at the graphic beta move. In fact, this is a move which transforms a pair of edges (from the right of the picture) into the graph from the left of the picture. The fact that the edges intersect in the gure is irrelevant. What matters is that, for the sake of performing the move, one edge is temporarily decorated with 1-3 and the other with 4-2. Here are two more equivalent depictions of the same rule, coming from di erent choices of 1-3, 4-2 decorations. We may see the graphic beta move as 15\nbut also as Let me then make some notations of the gures from the left hand sides of the previous diagrams. Here they are: for the rst gure we introduce the (lambda calculus) \"crossing macro\" and for the second gure the other (lambda calculus) \"crossing macro\": 16\nWith these notations the graphic beta move may be see as this braiding operation or as this other braiding operation These are notations, or macros in a more technical language, which encode the performing of the graphic beta move in a particular embedding (of the graph) in the plane. As such, they look dependent of the particular embedding, but the crossings satisfy the Reidemeister moves for knot diagrams, as explained in arXiv:1211.1604, [1], therefore this notation system is independent of the change of embedding of the graphs in the 3-dim space! 8 Extended graphic beta move In the section 5 we de ned the emergent algebra crossing macros. It can be noticed a very intriguing resemblance between crossings in emergent algebras (as encoded in graphic lambda) and crossings macros in graphic lambda. More speci cally, here is the encoding of 17\na crossing in emergent algebras: which is very much like the crossing macro Likewise, here is the other crossing in emergent algebras: and its \"twin\" crossing macro 18\nThese crossings are related in graphic lambda calculus through an idea introduced in arXiv:1205.0139, [3]. Here is the explanation. In \u0015-Scale there are two operations, namely the \u0015abstraction and a \"\"\" operation, one for every coe\u000ecient \"in a commutative group. The application operation from lambda calculus comes as a composite of these two fundamental operations. Moreover, the \"operation IS NOT THE SAME AS the operation \u0016 \"from emergent algebras. The emergent algebra operation \u0016 \"is also de ned as a composite of the two fundamental operations of \u0015-Scale (see the paper, de nition 2.2). Later, in graphic lambda calculus, I renounced at the \"operation of \u0015-Scale as a prim- itive operation, replacing it with the operation \u0016 \"from emergent algebras. To be clear, I used implicitly proposition 3.2 from the mentioned paper, which gives a description of the fundamental \"operation of \u0015-Scale calculus in terms of the lambda abstraction operation, the application operation and the emergent algebra operation \u0016 \". The extended beta move pattern. I shall de ne now a macro in graphic lambda calcu- lus (inspired by the said proposition 3.2) which corresponds to the fundamental \"operation from\u0015-Scale calculus. Here is it: We use this for de ning the extended beta move pattern: Let's prove that the extended beta move pattern is more general than the beta move 19\npattern and also than the pattern which appears in the emergent algebra crossing macros. The extended beta move pattern can be transformed into the beta move pattern. Indeed, let us consider the particular case \"= 1. By using the (ext2) move and then local pruning we get: The extended beta move pattern can be transformed into the emergent algebra crossing pattern. I shall now apply the graphic beta move for an arbitrary \", like this: which is very nice, because we obtain the crossing macro of emergent algebras. The extended graphic beta move. Inspired by the introduction of the extended beta move pattern, let's de ne now a generalization of the graphic beta move. - The extended graphic beta move. For any \"2\u0000 we de ne the move \"ext (\")\" by the following gure: 20\nWho could have guessed such a move, involving four gates, without thinking about diagram crossings AND about lambda calculus? Now, after expressing my enthusiasm, let's see what this move can do. The extended graphic beta move implies the graphic beta move. Indeed, if we take \"= 1 then we use a previous reasoning to transform the extended beta move pattern into the graphic beta move pattern. This gives the graphic beta. Dual graphic beta move. The extended graphic beta move is equivalent with the pair of moves: The second move is called \"the dual graphic beta move\" or \" \u0003(\") move\". Let us prove the equivalence. The extended graphic beta move implies the graphic beta move. Also, we have seen that it implies as well the \u0003(\") move, because we can use the graphic beta move, seen as ext (1) move, to transform the pattern from the LHS of the ext (\") move into the pattern from the LHS of the \u0003(\") move. Now we have to prove that the pair (graphic beta move, \u0003(\") move) implies the ext (\"). Recall that in terms of the crossing macro involving only lambda calculus gates, the graphic beta move looks like this: The \u0003(\") move, expressed via the emergent algebra crossings, has this appearance: 21\nNow, the ext (\") move, expressed with crossing macros, looks like this: Now we see that by applying rst a \u0003(\") move and then an usual graphic beta move, we recover the extended beta move. A duality. The equivalence between the extended graphic beta move and the pair (graphic beta move, \u0003(\") move) suggests the following duality: The last correspondence should be understood like it appears in the left hand sides of the \"dual\" moves. 9 Dual of the extended beta move. Termination as im- plosion or blow-out If we take seriously the duality from the last section, then the dual of the extended beta move should be this: 22\nThe problem is to nd out if the dual of the extended beta move can be deduced from the other moves of graphic lambda calculus. If we look at the graph from the right hand side, then we see we can apply a beta move, like this: Therefore the dual of the extended extended beta move is equivalent with this curious looking move: This move looks like a pruning move but it is not on the list. We reason like this: by using the extended beta move and the Reidemeister 2 move (for emergent algebras) we arrive at 23\nWe may repeat inde nitely this succesion of moves, or, alternatively, we may use the extended beta move with an arbitrary \u0016from the group \u0000. The intuition behind this is that the gate \u0016\"is a dilation gate, which has an input coming from the fan-out gate and the other connected to the output of the gate, therefore, by circulating along this loop, we apply an endless number of dilations of coe\u000ecient \". At the limit (if such a concept makes sense at this level of generality), either the things blow to in nity (if \"\u00151) or they implode to the value given by the fan-out gate(if \"\u00141), or they circulate forever in a loop (if \"= 1) . In all cases the graph with only one input and no outputs, which we see in the previous gure, behaves exactly like the termination gate! Therefore, we may as well eliminate the termination gate and replace it in all the for- malism by the gate from the previous gure. By this replacement the \"dual extended beta move\" is true, as a consequence of the usual graphic beta move. Moreover, if we do this replacement, then we shall have pure trivalent graphs in the formalism because the ugly univalent termination gate is replaced by a trivalent graph! On the other side, let us look again at the mystery move. The graph from the left hand side can be expressed by using the (emergent algebra) crossing macros: This form of the graph makes obvious where to apply the extended beta move. Let's see what we get. Therefore it looks like the mystery move is a combination of the extended beta move and elimination of loops. There is no need to replace the termination gate by a trivalent graph, as suggested in the previous post, although that is an idea worthy of further exploration. 24\n10 Dual of the graphic beta move implies some Reide- meister moves Here are some particular applications of the dual of the graphic beta move. The rst is this: But this is equivalent with the emergent algebra move R1a, via a CO-COMM move. Likewise, another application of of the dual of the graphic beta move is this: which is the same as the emergent algebra move R2a. The third application is this one: which appeared in the last part of the section 9. Finally, there is also this: which was not mentioned before. It suggests that the following graph 25\nbehaves like the generic point in algebraic geometry. References [1] M. Buliga, Graphic lambda calculus and knot diagrams, arXiv:1211.1604 [2] M. Buliga, Local and global moves on locally planar trivalent graphs, lambda calculus and lambda-Scale, arXiv:1207.0332 [3] M. Buliga, Lambda-Scale, a lambda calculus for spaces with dilations, arXiv:1205.0139 [4] M. Buliga, Emergent algebras, arXiv:0907.1520 [5] M. Buliga, Dilatation structures I. Fundamentals, J. Gen. Lie Theory Appl. ,1(2007), 2, 65-95. [6] M. Buliga, Braided spaces with dilations and sub-riemannian symmetric spaces, in: Geometry. Exploratory Workshop on Di erential Geometry and its Applications, eds. D. Andrica, S. Moroianu, Cluj-Napoca 2011, 21-35, arXiv:1005.5031 [7] M. Buliga, Computing with space: a tangle formalism for chora and di erence , arXiv:1103.6007 [8] M. Polyak, Minimal generating sets of Reidemeister moves, arXiv:0908.3127 26\n",
  "metadata": {
    "paper_id": "1302.0778v1",
    "downloaded_at": "2025-08-24T21:26:50.521151+00:00"
  },
  "processed_at": "2025-08-24T21:26:50.521166+00:00"
}